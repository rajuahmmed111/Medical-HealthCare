generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
//            ENUM
// ------------------------------

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

// ------------------------------
//            MODEL
// ------------------------------

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  needPasswordChange Boolean  @default(true)
  role               UserRole @default(PATIENT)
  status             String   @default("ACTIVE")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // relations
  admin   Admin?
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  user              User               @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]

  @@map("patients")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  dateOfBirth         String
  gender              Gender
  bloodGroup          BloodGroup    @default(A_POSITIVE)
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_data")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medical_reports")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int      @default(0)
  gender              Gender   @default(MALE)
  appointmentFee      Int      @default(0)
  qualification       String
  currentWorkingPlace String
  designation         String
  averageRating       Float    @default(0.0)
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // relations
  user              User                @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
  doctorSchedule    DoctorSchedule[]

  @@map("doctors")
}

model Specialties {
  id        String   @id @default(uuid())
  title     String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  doctorSpecialties DoctorSpecialties[]
}

model DoctorSpecialties {
  // relations
  doctorId      String
  specialtiesId String
  specialties   Specialties @relation(fields: [specialtiesId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@id([doctorId, specialtiesId])
  @@map("doctor_specialties")
}

model Schedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  doctorSchedule DoctorSchedule[]

  @@map("schedules")
}

model DoctorSchedule {
  // relations
  doctorId   String
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  doctor     Doctor   @relation(fields: [doctorId], references: [id])

  @@id([scheduleId, doctorId])
  @@map("doctor_schedule")
}
